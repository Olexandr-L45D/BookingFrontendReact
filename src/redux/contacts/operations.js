// contacts - operattions
import axios from "axios";
import { createAsyncThunk } from "@reduxjs/toolkit";
import { setAuthHeader } from "../auth/operations";

axios.defaults.baseURL = "https://bookingbackendnode.onrender.com";

// ---------------------- ADD CONTACT ----------------------
export const addContact = createAsyncThunk(
  "contacts/addContact",
  async ({ name, phoneNumber, email, role }, thunkAPI) => {
    try {
      // ‚úÖ –±–µ—Ä–µ–º–æ —Ç–æ–∫–µ–Ω –∑ Redux –∞–±–æ localStorage
      const state = thunkAPI.getState();
      const token = state.auth.token || localStorage.getItem("token");
      if (!token) {
        return thunkAPI.rejectWithValue("No token available");
      }

      // ‚úÖ –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ axios (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤)
      setAuthHeader(token);

      // ‚úÖ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥
      const { data } = await axios.post("/contacts", {
        name,
        phoneNumber,
        email,
        role,
      });

      // ‚ö†Ô∏è –ø—Ä–∏–ø—É—Å–∫–∞—é, —â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–∞–∫:
      // { status, message, contact: {...} }
      if (!data || !data.contact) {
        return thunkAPI.rejectWithValue("Invalid server response");
      }

      return data.contact; // üëà –≤—ñ–¥–¥–∞—î–º–æ –æ–±‚Äô—î–∫—Ç –∫–æ–Ω—Ç–∞–∫—Ç—É —É fulfilled
    } catch (error) {
      return thunkAPI.rejectWithValue(
        error.response?.data?.message || error.message
      );
    }
  }
);

// ---------------------- FETCH ALL CONTACTS ----------------------
export const fetchContact = createAsyncThunk(
  "contacts/fetchAll",
  async (_, { getState, rejectWithValue }) => {
    try {
      // const token = getState().auth.token;
      const token = getState().auth.token || localStorage.getItem("token");
      if (!token) return rejectWithValue("No token available");

      setAuthHeader(token); // –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –¥–æ axios

      const { data } = await axios.get("/contacts");
      // —Å–µ—Ä–≤–µ—Ä –ø–æ–≤–µ—Ä—Ç–∞—î { status, message, data: { data: [...], ...pagination } }
      return data.data.data; // üëà –º–∞—Å–∏–≤ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    } catch (e) {
      return rejectWithValue(e.message);
    }
  }
);

// ---------------------- DELETE CONTACTS ----------------------
export const deleteContact = createAsyncThunk(
  "contacts/deleteContact",
  async (contactId, { getState, rejectWithValue }) => {
    try {
      const token = getState().auth.token;
      if (!token) return rejectWithValue("No token available");

      setAuthHeader(token); // –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ headers

      await axios.delete(`/contacts/${contactId}`);
      return { _id: contactId }; // üëà –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ id –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑—ñ —Å—Ç–µ–π—Ç—É
    } catch (error) {
      return rejectWithValue(error.message);
    }
  }
);

// ---------------------- UPDATE CONTACT ----------------------
export const updateContact = createAsyncThunk(
  "contacts/updateContact",
  async ({ contactId, phoneNumber, email, role }, thunkAPI) => {
    try {
      // ‚úÖ –±–µ—Ä–µ–º–æ —Ç–æ–∫–µ–Ω –∑ Redux –∞–±–æ localStorage
      const state = thunkAPI.getState();
      const token = state.auth.token || localStorage.getItem("token");
      if (!token) {
        return thunkAPI.rejectWithValue("No token available");
      }

      // ‚úÖ –¥–æ–¥–∞—î–º–æ —Ç–æ–∫–µ–Ω –≤ axios (—É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤)
      setAuthHeader(token);

      // ‚úÖ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –Ω–∞ –±–µ–∫–µ–Ω–¥
      const { data } = await axios.put(`/contacts/${contactId}`, {
        phoneNumber,
        email,
        role,
      });

      // ‚ö†Ô∏è –ø—Ä–∏–ø—É—Å–∫–∞—é, —â–æ –±–µ–∫–µ–Ω–¥ –ø–æ–≤–µ—Ä—Ç–∞—î —Ç–∞–∫:
      // { status, message, data: {...} }
      if (!data || !data.data) {
        return thunkAPI.rejectWithValue("Invalid server response");
      }
      // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∑–∞–≤–∂–¥–∏ –∑ _id
      return { ...data.data, _id: data.data._id || contactId };
      // üëà –≤—ñ–¥–¥–∞—î–º–æ –æ–±‚Äô—î–∫—Ç –æ–Ω–æ–≤–ª–µ–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç—É —É fulfilled
    } catch (error) {
      return thunkAPI.rejectWithValue(
        error.response?.data?.message || error.message
      );
    }
  }
);

export default axios;

// –ø–æ–ª—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ =
// {
//   "name": "John Doe",
//   "phoneNumber": "555-33-11",
//   "email": "Lui_Doe123@gmail.com",
//   "role": "client"
// }
// –æ–±—î–∫—Ç —è–∫–∏–π –ø–æ–≤–µ—Ä—Ç–∞—î –±–µ–∫–Ω–¥ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∞ =
// {
//   "status": 200,
//   "message": "Successfully update contact with id 65ca67e7ae7f10c88b598384!",
//   "data": {
//     "_id": "65e4decdd286b30065d54af9",
//     "name": "John Doe",
//     "phoneNumber": "222-33-11",
//     "email": "John_Doe123@gmail.com",
//     "role": "client"
//   }
// }
